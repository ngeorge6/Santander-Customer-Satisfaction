# -*- coding: utf-8 -*-
"""HW1_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WcMJFt2wa1etAH8NNRvjoRL-PgS-wDzq
"""

# Commented out IPython magic to ensure Python compatibility.
#Import Python Packages
#from google.colab import drive
#drive.mount('/content/drive/')

from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

#!cp /content/plot_confusion_matrix.py /content/drive/My\ Drive/CIS508

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix,classification_report

#Read training data file
trainfile = r'/gdrive/My Drive/CIS 508/HW1/Santander Customer Satisfaction - TRAIN.csv'
trainData = pd.read_csv(trainfile)

#Read test data file
testfile = r'/gdrive/My Drive/CIS 508/HW1/Santander Customer Satisfaction - TEST-Without TARGET.csv'
testData = pd.read_csv(trainfile)

trainData.head()
#print("=======")
testData.head()

#Copy Train data excluding target
trainData_Copy = trainData.iloc[:, :-1].copy()
testData_Copy = testData.iloc[:, :-1].copy()

trainData_Copy.head()

#List of Categorical Features
#categoricalFeatures = ["Wife's Education", "Husband's Education", 'No of Children ever born', "Wife's religion", "Wife's now working?", "Husband's occupation", 'Standard-of-living index', 'Media exposure']

#Combine Train and test for one Hot Encoding
combined_Data = pd.concat([trainData_Copy, testData_Copy], keys=[0,1])


#Do one Hot encoding for categorical features
#combined_Data = pd.get_dummies(combined_Data,columns=categoricalFeatures)

#Separate Train data and test data
X_Train = combined_Data.xs(0)
X_Test = combined_Data.xs(1)

X_Test.head()

#Select just Target Column
Y_Train = trainData.iloc[:, -1]
Y_Test = testData.iloc[:, -1]

#Create Decision Tree Classifier
#chosing the best random split at each node
clf=DecisionTreeClassifier( splitter="random")

#Apply Classifier on Train and Target
clf.fit(X_Train,Y_Train)

#Get Class Prediction as a data frame with header as Prediction
pred=pd.DataFrame(clf.predict(X_Train),columns=["Prediction"])

pred.head()

#Get Class Prediction probabilities as a data frame 
#Get Prediction Probability for the predicted class as a dataframe
pred_Probability =pd.DataFrame(clf.predict_proba(X_Train))

pred_Probability.head()

#Write into a file with actual prediction and corresponding probability
pd.concat([pred,pred_Probability],axis=1).to_csv("/gdrive/My Drive/CIS 508/HW1/1.Train_results.csv", index = None)

res=pd.read_csv('/gdrive/My Drive/CIS 508/HW1/1.Train_results.csv')
res.head()

#Print Classification Report
print(classification_report(Y_Train,pred))

#Testset prediction======================================================================
#Apply Classifier on Test and Target
clf.fit(X_Test,Y_Test)

#Get Class Prediction as a data frame with header as Prediction
pred=pd.DataFrame(clf.predict(X_Test),columns=["Prediction"])

pred.head()

#Get Class Prediction probabilities as a data frame 
#Get Prediction Probability for the predicted class as a dataframe
pred_Probability =pd.DataFrame(clf.predict_proba(X_Test))

pred_Probability.head()

#Write into a file with actual prediction and corresponding probability
pd.concat([pred,pred_Probability],axis=1).to_csv("/gdrive/My Drive/CIS 508/HW1/1.Test_results.csv", index = None)

res=pd.read_csv('/gdrive/My Drive/CIS 508/HW1/1.Test_results.csv')
res.head()

#Print Classification Report
print(classification_report(Y_Test,pred))